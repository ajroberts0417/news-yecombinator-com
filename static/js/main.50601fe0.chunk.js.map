{"version":3,"sources":["logo.svg","Header.js","Link.js","LinkList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","Link","num_comments","created","points","author","title","permalink","index","link","parseInt","style","flex","alignItems","justifyContent","textDecoration","color","target","substring","elapsed","Date","getTime","toString","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","LinkList","props","state","error","isLoaded","posts","fetch","then","response","json","result","setState","data","children","this","map","post","key","ups","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.50601fe0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useContext } from \"react\";\n\n//import { AuthContext } from \"../Context/AuthProvider\";\n\nconst Header = () => {\n  //const { authToken, removeAuthToken } = useContext(AuthContext);\n  //const history = useHistory();\n  \n  return (\n    <div className=\"flex pa1 justify-between nowrap orange\">\n      <div className=\"flex flex-fixed black\">\n        <div className=\"fw7 mr1\">Ye News</div>\n        <a href=\"https://www.reddit.com/r/Kanye/new/\" className=\"ml1 no-underline black\">\n          new\n        </a>\n        <div className=\"ml1\">|</div>\n        <a href=\"https://www.reddit.com/r/Kanye/top/?t=week\" className=\"ml1 no-underline black\">\n          top\n        </a>\n        <div className=\"ml1\">|</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nfunction timeDifference(created) {\n    const current = new Date().getTime().toString()\n    const previous = new Date(created).getTime().toString() * 1000\n\n    const elapsed = current - previous\n\n    const milliSecondsPerMinute = 60 * 1000\n    const milliSecondsPerHour = milliSecondsPerMinute * 60\n    const milliSecondsPerDay = milliSecondsPerHour * 24\n    const milliSecondsPerMonth = milliSecondsPerDay * 30\n    const milliSecondsPerYear = milliSecondsPerDay * 365\n  \n    if (elapsed < milliSecondsPerMinute / 3) {\n      return 'just now'\n    }\n    if (elapsed < milliSecondsPerMinute) {\n      return 'less than 1 min ago'\n    } else if (elapsed < milliSecondsPerHour) {\n      return Math.round(elapsed / milliSecondsPerMinute) + ' minutes ago'\n    } else if (elapsed < milliSecondsPerDay) {\n      return Math.round(elapsed / milliSecondsPerHour) + ' hours ago'\n    } else if (elapsed < milliSecondsPerMonth) {\n      return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n    } else if (elapsed < milliSecondsPerYear) {\n      return Math.round(elapsed / milliSecondsPerMonth) + ' months ago'\n    } else {\n      return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\n    }\n  }\n\nconst Link = ({ num_comments, created, points, author, title, permalink, index}) => {\n    const link = \"https://reddit.com\" + permalink\n    return (\n    <div className=\"flex mt2 items-start\">\n      <div className=\"flex items-start\">\n        <div className=\"gray\">{parseInt(index, 10) + 1}.</div>\n          <div className=\"ml1 gray f11 cursor\" >\n            â–²\n          </div>\n      </div>\n      <div className=\"ml1 items-start tl\">\n        <div  style={{flex: 1, alignItems: 'left', justifyContent: 'left'}}>\n          <a href={link} style={{textDecoration: 'none', color: 'black'}}>{title} </a>\n          <a className=\"gray cursor f11\" href={link} target=\"__blank\">\n            ({permalink.substring(8)})\n          </a>\n        </div>\n        <div className=\"f11 lh-copy gray\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td>\n                            <span className=\"score\">{points} points by </span>\n                            <span className=\"reddituser\">{author} </span>\n                            <span className=\"created\"> {timeDifference(created)} | </span>\n                            <a href={link} style={{textDecoration: 'none', color: 'grey'}} className=\"num_comments\">{num_comments} comments</a>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            \n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Link;\n","import { render } from \"@testing-library/react\";\nimport React, { Component } from 'react';\n\nimport Link from \"./Link\";\n\n\nclass LinkList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error : null,\n            isLoaded : false,\n            posts : []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://www.reddit.com/r/kanye/hot.json?count=20\")\n        .then( response => response.json())\n        .then(\n            // handle the result\n            (result) => {\n                this.setState({\n                    isLoaded : true,\n                    posts: result.data.children\n                });\n            },\n\n            // handle error\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                })\n            },\n        )\n    }\n\n    render() {\n        const {error, isLoaded, posts} = this.state;\n        if(error){\n            return <div>Error in loading</div>\n        }else if (!isLoaded) {\n            return <div>Loading ...</div>\n        }else{\n            return(\n                <div>\n                    <ol>\n                    {\n                        posts.map((post, index) => (\n                            <Link key = {post.data.permalink} num_comments = {post.data.num_comments} created = {post.data.created} points = {post.data.ups} author = {post.data.author} title={post.data.title} permalink={post.data.permalink} index={index} />\n                        ))\n                    }\n                    </ol>\n                </div>\n            );\n        }    \n    }\n}\n\nexport default LinkList;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./Header\";\nimport Link from \"./Link\";\nimport LinkList from \"./LinkList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <LinkList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}